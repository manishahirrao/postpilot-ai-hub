import React, { useState, useRef } from 'react';
import { Play, Pause, Download } from 'lucide-react';

interface Character {
  id: string;
  name: string;
  role: string;
  emoji: string;
  text: string;
  color: string;
}

interface Language {
  code: string;
  name: string;
  flag: string;
}

interface Translations {
  [key: string]: {
    [characterId: string]: string;
  };
}

const VoiceAgentInterface: React.FC = () => {
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');
  const [isPlaying, setIsPlaying] = useState<boolean>(false);
  const [translatedText, setTranslatedText] = useState<string>('');
  const speechSynthesisRef = useRef<SpeechSynthesisUtterance | null>(null);

  const languages: Language[] = [
    { code: 'en', name: 'ENGLISH', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', name: 'HINDI', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta', name: 'TAMIL', flag: 'ЁЯЗоЁЯЗ│' }
  ];

  // Characters from the document only
  const characters: Character[] = [
    {
      id: 'jessica',
      name: 'Jessica',
      role: 'Narrate a story',
      emoji: 'ЁЯМ╕',
      text: "In the ancient land of Eldoria, where the skies glowed with magical colors and the forests whispered old secrets, lived a dragon named Zephyros. Unlike the scary dragons told in stories, Zephyros was wise and kind. People who knew about him respected and admired him.",
      color: '#ff6b6b'
    },
    {
      id: 'brian',
      name: 'Brian',
      role: 'Record an ad',
      emoji: 'ЁЯН╡',
      text: "AromaBrew doesn't just make coffee --- it creates moments. From the first aroma to the last sip, it's the boost I need to take on the day.",
      color: '#4ecdc4'
    },
    {
      id: 'alice',
      name: 'Alice',
      role: 'Help a customer',
      emoji: 'ЁЯдЭ',
      text: "Thank you for contacting PostPilot support. I understand you're having trouble with your voice synthesis project. Don't worry --- we're here to help. Could you please share your account email and explain the specific issue you're facing? This will help us solve the problem more quickly.",
      color: '#45b7d1'
    },
    {
      id: 'bill',
      name: 'Bill',
      role: 'Speak different languages',
      emoji: 'ЁЯМН',
      text: "English has the most words, with over 170,000 in the Oxford English Dictionary. Le fran├зais est connu pour sa sonorit├й m├йlodieuse et ses expressions romantiques. Deutsch ist ber├╝hmt f├╝r seine zusammengesetzten W├╢rter, wie Rindfleischetikettierungs├╝berwachungsaufgaben├╝bertragungsgesetz. цЧецЬмшкЮуБпуАБшдЗщЫСуБкшбишиШуВ╖уВ╣уГЖуГауБичЛмчЙ╣уБоцХмшкЮф╜Уч│╗уБзчЯеуВЙуВМуБжуБДуБ╛уБЩуАВ Polski s┼Вynie z j─Щzyko┼Вamc├│w i zbitek sp├│┼Вg┼Вoskowych, jak szcz─Щ┼Ыcie. ╪з╪▒╪п┘И ╪з┘╛┘Ж█Т ┘Б╪з╪▒╪│█М ╪╣╪▒╪и█М ╪▒╪│┘Е ╪з┘Д╪о╪╖ ╪з┘И╪▒ ╪┤╪з╪╣╪▒╪з┘Ж█Б ╪▒┘И╪з█М╪к ┌й█М ┘И╪м█Б ╪│█Т ┘Е╪┤█Б┘И╪▒ █Б█Т█Ф",
      color: '#96ceb4'
    },
    {
      id: 'charlie',
      name: 'Charlie',
      role: 'Lead a meditation',
      emoji: 'ЁЯзШ',
      text: "Take a deep breath in... and gently exhale... Remember --- focus on your breath. Listen to the soft, ambient sounds of the evening as they wrap around you, bringing calm and stillness.",
      color: '#feca57'
    }
  ];

  // Translations for Hindi and Tamil
  const translations: Translations = {
    hi: {
      jessica: "рдкреНрд░рд╛рдЪреАрди рдПрд▓реНрдбреЛрд░рд┐рдпрд╛ рдХреА рднреВрдорд┐ рдореЗрдВ, рдЬрд╣рд╛рдБ рдЖрдХрд╛рд╢ рдЬрд╛рджреБрдИ рд░рдВрдЧреЛрдВ рд╕реЗ рдЪрдордХрддрд╛ рдерд╛ рдФрд░ рдЬрдВрдЧрд▓ рдкреБрд░рд╛рдиреЗ рд░рд╣рд╕реНрдпреЛрдВ рдХреА рдлреБрд╕рдлреБрд╕рд╛рд╣рдЯ рдХрд░рддреЗ рдереЗ, рдЬрд╝реЗрдлрд┐рд░реЛрд╕ рдирд╛рдо рдХрд╛ рдПрдХ рдбреНрд░реИрдЧрди рд░рд╣рддрд╛ рдерд╛ред рдХрд╣рд╛рдирд┐рдпреЛрдВ рдореЗрдВ рдмрддрд╛рдП рдЧрдП рдбрд░рд╛рд╡рдиреЗ рдбреНрд░реИрдЧрдиреЛрдВ рдХреЗ рд╡рд┐рдкрд░реАрдд, рдЬрд╝реЗрдлрд┐рд░реЛрд╕ рдмреБрджреНрдзрд┐рдорд╛рди рдФрд░ рджрдпрд╛рд▓реБ рдерд╛ред рдЬреЛ рд▓реЛрдЧ рдЙрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирддреЗ рдереЗ, рд╡реЗ рдЙрд╕рдХрд╛ рд╕рдореНрдорд╛рди рдФрд░ рдкреНрд░рд╢рдВрд╕рд╛ рдХрд░рддреЗ рдереЗред",
      brian: "рдПрд░реЛрдорд╛рдмреНрд░реВ рд╕рд┐рд░реНрдл рдХреЙрдлреА рдирд╣реАрдВ рдмрдирд╛рддрд╛ --- рдпрд╣ рдкрд▓реЛрдВ рдХрд╛ рдирд┐рд░реНрдорд╛рдг рдХрд░рддрд╛ рд╣реИред рдкрд╣рд▓реА рд╕реБрдЧрдВрдз рд╕реЗ рдЖрдЦрд┐рд░реА рдШреВрдВрдЯ рддрдХ, рдпрд╣ рд╡рд╣ рдКрд░реНрдЬрд╛ рд╣реИ рдЬрд┐рд╕рдХреА рдореБрдЭреЗ рджрд┐рди рдХреЛ рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред",
      alice: "рдкреЛрд╕реНрдЯрдкрд╛рдпрд▓рдЯ рд╕рдкреЛрд░реНрдЯ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдореИрдВ рд╕рдордЭрддреА рд╣реВрдБ рдХрд┐ рдЖрдкрдХреЛ рдЕрдкрдиреЗ рд╡реЙрдпрд╕ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ --- рд╣рдо рдпрд╣рд╛рдБ рдорджрдж рдХреЗ рд▓рд┐рдП рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рдИрдореЗрд▓ рд╕рд╛рдЭрд╛ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЙрд╕ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдЬрд┐рд╕рдХрд╛ рдЖрдк рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдЗрд╕рд╕реЗ рд╣рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдХреЛ рдФрд░ рдЬрд▓реНрджреА рд╣рд▓ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдорд┐рд▓реЗрдЧреАред",
      bill: "рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рд╢рдмреНрдж рд╣реИрдВ, рдСрдХреНрд╕рдлреЛрд░реНрдб рдЗрдВрдЧреНрд▓рд┐рд╢ рдбрд┐рдХреНрд╢рдирд░реА рдореЗрдВ 170,000 рд╕реЗ рдЕрдзрд┐рдХред рдлреНрд░реЗрдВрдЪ рдЕрдкрдиреА рдордзреБрд░ рдзреНрд╡рдирд┐ рдФрд░ рд░реЛрдорд╛рдВрдЯрд┐рдХ рдЕрднрд┐рд╡реНрдпрдХреНрддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╕рд┐рджреНрдз рд╣реИред рдЬрд░реНрдорди рдЕрдкрдиреЗ рд╕рдВрдпреБрдХреНрдд рд╢рдмреНрджреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╕рд┐рджреНрдз рд╣реИред рдЬрд╛рдкрд╛рдиреА рдЕрдкрдиреА рдЬрдЯрд┐рд▓ рд▓реЗрдЦрди рдкреНрд░рдгрд╛рд▓реА рдФрд░ рдЕрдиреВрдареА рд╕рдореНрдорд╛рдирдЬрдирдХ рднрд╛рд╖рд╛ рдкреНрд░рдгрд╛рд▓реА рдХреЗ рд▓рд┐рдП рдЬрд╛рдиреА рдЬрд╛рддреА рд╣реИред рдкреЛрд▓рд┐рд╢ рдЕрдкрдиреЗ рдЬреАрдн рдореЛрдбрд╝рдиреЗ рд╡рд╛рд▓реЗ рд╢рдмреНрджреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╕рд┐рджреНрдз рд╣реИред рдЙрд░реНрджреВ рдЕрдкрдиреА рдлрд╛рд░рд╕реА рдЕрд░рдмреА рд▓рд┐рдкрд┐ рдФрд░ рдХрд╛рд╡реНрдп рдкрд░рдВрдкрд░рд╛ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╕рд┐рджреНрдз рд╣реИред",
      charlie: "рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдВ... рдФрд░ рдзреАрд░реЗ рд╕реЗ рдЫреЛрдбрд╝реЗрдВ... рдпрд╛рдж рд░рдЦреЗрдВ --- рдЕрдкрдиреА рд╕рд╛рдВрд╕ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВред рд╢рд╛рдо рдХреА рдХреЛрдорд▓, рдкрд░рд┐рд╡реЗрд╢реА рдЖрд╡рд╛рдЬрд╝реЛрдВ рдХреЛ рд╕реБрдиреЗрдВ рдЬреЛ рдЖрдкрдХреЛ рдШреЗрд░рддреА рд╣реИрдВ, рд╢рд╛рдВрддрд┐ рдФрд░ рд╕реНрдерд┐рд░рддрд╛ рд▓рд╛рддреА рд╣реИрдВред"
    },
    ta: {
      jessica: "роОро▓рпНроЯрпЛро░ро┐ропро╛ро╡ро┐ройрпН рокро┤роЩрпНроХро╛ро▓ роиро┐ро▓родрпНродро┐ро▓рпН, ро╡ро╛ройроорпН рооро╛ропро╛роЬро╛ро▓ ро╡рогрпНрогроЩрпНроХро│ро╛ро▓рпН роТро│ро┐ро░рпНроирпНродрпБ, роХро╛роЯрпБроХро│рпН рокро┤рпИроп ро░роХроЪро┐ропроЩрпНроХро│рпИроХрпН роХро┐роЪрпБроХро┐роЪрпБродрпНрод роЗроЯродрпНродро┐ро▓рпН, роЪрпЖроГрокро┐ро░рпЛро╕рпН роОройрпНро▒ роТро░рпБ роЯро┐ро░ро╛роХройрпН ро╡ро╛ро┤рпНроирпНродродрпБ. роХродрпИроХро│ро┐ро▓рпН роЪрпКро▓рпНро▓рокрпНрокроЯрпБроорпН рокропроЩрпНроХро░рооро╛рой роЯро┐ро░ро╛роХройрпНроХро│рпИрокрпН рокрпЛро▓ро▓рпНро▓ро╛рооро▓рпН, роЪрпЖроГрокро┐ро░рпЛро╕рпН роЮро╛ройроорпБро│рпНро│родрпБроорпН роХро░рпБрогрпИропрпБро│рпНро│родрпБрооро╛роХ роЗро░рпБроирпНродродрпБ. роЕро╡ро░рпИрокрпН рокро▒рпНро▒ро┐родрпН родрпЖро░ро┐роирпНродро╡ро░рпНроХро│рпН роЕро╡ро░рпИ роородро┐родрпНродрпБ ро╡роирпНродройроорпН роЪрпЖропрпНродройро░рпН.",
      brian: "роЕро░рпЛрооро╛рокрпНро░рпВ ро╡рпЖро▒рпБроорпН роХро╛рокро┐ родропро╛ро░ро┐рокрпНрокродро┐ро▓рпНро▓рпИ --- роЕродрпБ родро░рпБрогроЩрпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ. роорпБродро▓рпН роиро▒рпБроорогродрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роХроЯрпИроЪро┐роХрпН роХрпБроЯро┐ро╡ро░рпИ, роиро╛ро│рпИ роОродро┐ро░рпНроХрпКро│рпНро│ роОройроХрпНроХрпБродрпН родрпЗро╡рпИропро╛рой роКроХрпНроХроорпН роЕродрпБ.",
      alice: "рокрпЛро╕рпНроЯрпНрокрпИро▓роЯрпН роЖродро░ро╡рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКрогрпНроЯродро▒рпНроХрпБ роиройрпНро▒ро┐. роЙроЩрпНроХро│рпН роХрпБро░ро▓рпН родрпКроХрпБрокрпНрокрпБ родро┐роЯрпНроЯродрпНродро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роПро▒рпНрокроЯрпНроЯрпБро│рпНро│родрпБ роОройрпНрокродрпИ роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН --- роиро╛роЩрпНроХро│рпН роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЛроорпН. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роХрогроХрпНроХрпБ рооро┐ройрпНройроЮрпНроЪро▓рпИрокрпН рокроХро┐ро░рпНроирпНродрпБ, роирпАроЩрпНроХро│рпН роОродро┐ро░рпНроХрпКро│рпНро│рпБроорпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪро┐роХрпНроХро▓рпИ ро╡ро┐ро│роХрпНроХ роорпБроЯро┐ропрпБрооро╛? роЗродрпБ роЪро┐роХрпНроХро▓рпИ ро╡ро┐ро░рпИро╡ро╛роХродрпН родрпАро░рпНроХрпНроХ роОроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡рпБроорпН.",
      bill: "роЖроЩрпНроХро┐ро▓родрпНродро┐ро▓рпН рооро┐роХ роЕродро┐роХ роЪрпКро▒рпНроХро│рпН роЙро│рпНро│рой, роЖроХрпНро╕рпНрокрпЛро░рпНроЯрпН роЖроЩрпНроХро┐ро▓ роЕроХро░ро╛родро┐ропро┐ро▓рпН 170,000 роХрпНроХрпБроорпН роорпЗро▓рпН. рокро┐ро░рпЖроЮрпНроЪрпБ роЕродройрпН роЗройро┐роорпИропро╛рой роТро▓ро┐ рооро▒рпНро▒рпБроорпН роХро╛родро▓рпН ро╡рпЖро│ро┐рокрпНрокро╛роЯрпБроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН. роЬрпЖро░рпНрооройрпН роЕродройрпН роХрпВроЯрпНроЯрпБроЪрпН роЪрпКро▒рпНроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН. роЬрокрпНрокро╛ройро┐роп роЕродройрпН роЪро┐роХрпНроХро▓ро╛рой роОро┤рпБродрпНродрпБ роорпБро▒рпИ рооро▒рпНро▒рпБроорпН родройро┐родрпНродрпБро╡рооро╛рой рооро░ро┐ропро╛родрпИ роорпКро┤ро┐ роЕроорпИрокрпНрокрпБроХрпНроХрпБ роЕро▒ро┐ропрокрпНрокроЯрпБроХро┐ро▒родрпБ. рокрпЛро▓ро┐ро╖рпН роЕродройрпН роиро╛роХрпНроХрпБ роЪрпБро┤ро▒рпНро▒рпБроорпН роЪрпКро▒рпНроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН. роЙро░рпБродрпБ роЕродройрпН рокро╛ро░роЪрпАроХ роЕро░рокро┐ роОро┤рпБродрпНродрпБ рооро▒рпНро▒рпБроорпН роХро╡ро┐родрпИ рокро╛ро░роорпНрокро░ро┐ропродрпНродро┐ро▒рпНроХрпБ рокро┐ро░рокро▓роорпН.",
      charlie: "роЖро┤рооро╛роХ роорпВроЪрпНроЪрпБ роЗро┤рпБроЩрпНроХро│рпН... роорпЖродрпБро╡ро╛роХ ро╡рпЖро│ро┐ропро┐роЯрпБроЩрпНроХро│рпН... роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН --- роЙроЩрпНроХро│рпН роорпВроЪрпНроЪро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН. рооро╛ро▓рпИропро┐ройрпН роорпЖройрпНроорпИропро╛рой, роЪрпБро▒рпНро▒рпБрокрпНрокрпБро▒ роТро▓ро┐роХро│рпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН, роЕро╡рпИ роЙроЩрпНроХро│рпИроЪрпН роЪрпБро▒рпНро▒ро┐, роЕроорпИродро┐ропрпБроорпН роиро┐роорпНроородро┐ропрпБроорпН роХрпКрогрпНроЯрпБ ро╡ро░рпБроХро┐ройрпНро▒рой."
    }
  };

  const getVoiceForLanguage = (langCode: string) => {
    const voices = speechSynthesis.getVoices();
    switch (langCode) {
      case 'hi':
        return voices.find(voice => voice.lang.startsWith('hi-IN') || voice.lang.startsWith('hi')) || voices[0];
      case 'ta':
        return voices.find(voice => voice.lang.startsWith('ta-IN') || voice.lang.startsWith('ta')) || voices[0];
      default:
        return voices.find(voice => voice.lang.startsWith('en-US') || voice.lang.startsWith('en')) || voices[0];
    }
  };

  const getTextToSpeak = (character: Character, language: string): string => {
    if (language === 'en') {
      return character.text;
    }
    return translations[language]?.[character.id] || character.text;
  };

  const handleCharacterClick = (character: Character) => {
    setSelectedCharacter(character);
    const textToShow = getTextToSpeak(character, selectedLanguage);
    setTranslatedText(textToShow);
    
    if (isPlaying) {
      speechSynthesis.cancel();
      setIsPlaying(false);
    }
  };

  const handleLanguageChange = (newLanguage: string) => {
    setSelectedLanguage(newLanguage);
    if (selectedCharacter) {
      const textToShow = getTextToSpeak(selectedCharacter, newLanguage);
      setTranslatedText(textToShow);
    }
    
    if (isPlaying) {
      speechSynthesis.cancel();
      setIsPlaying(false);
    }
  };

  const handlePlay = () => {
    if (!selectedCharacter) return;

    if (isPlaying) {
      speechSynthesis.cancel();
      setIsPlaying(false);
      return;
    }

    const textToSpeak = getTextToSpeak(selectedCharacter, selectedLanguage);
    const utterance = new SpeechSynthesisUtterance(textToSpeak);
    const voice = getVoiceForLanguage(selectedLanguage);
    
    if (voice) {
      utterance.voice = voice;
      utterance.lang = voice.lang;
    }
    
    // Adjust speech parameters based on language
    switch (selectedLanguage) {
      case 'hi':
        utterance.rate = 0.8;
        utterance.pitch = 1.1;
        break;
      case 'ta':
        utterance.rate = 0.8;
        utterance.pitch = 1.0;
        break;
      default:
        utterance.rate = 0.9;
        utterance.pitch = 1.0;
    }
    
    utterance.volume = 1;

    utterance.onstart = () => setIsPlaying(true);
    utterance.onend = () => setIsPlaying(false);
    utterance.onerror = () => setIsPlaying(false);

    speechSynthesisRef.current = utterance;
    speechSynthesis.speak(utterance);
  };

  const handleDownload = () => {
    if (!selectedCharacter) return;
    
    const textToDownload = translatedText || selectedCharacter.text;
    const element = document.createElement('a');
    const file = new Blob([textToDownload], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${selectedCharacter.name}_${selectedLanguage}_script.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const displayText = translatedText || (selectedCharacter ? getTextToSpeak(selectedCharacter, selectedLanguage) : '');

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 p-5">
      <div className="max-w-6xl mx-auto bg-white rounded-3xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-400 to-cyan-400 p-8 text-center text-white">
          <h1 className="text-4xl font-bold mb-3">Voice Agent Interface</h1>
          <p className="text-lg opacity-90">Select a character and hear their voice in your preferred language</p>
        </div>

        {/* Main Content */}
        <div className="p-8">
          {/* Text Display */}
          <div className="bg-gray-50 rounded-2xl p-8 mb-8 min-h-32 border-l-4 border-blue-400 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-50 to-cyan-50 opacity-50"></div>
            <div className="relative z-10">
              {selectedCharacter ? (
                <div>
                  <div className="flex items-center gap-3 mb-4">
                    <span className="text-2xl">{selectedCharacter.emoji}</span>
                    <div>
                      <h3 className="font-semibold text-gray-800">{selectedCharacter.name}</h3>
                      <p className="text-sm text-gray-600">{selectedCharacter.role}</p>
                    </div>
                    <div className="ml-auto">
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                        {languages.find(l => l.code === selectedLanguage)?.name}
                      </span>
                    </div>
                  </div>
                  <p className="text-lg leading-relaxed text-gray-700" dir={selectedLanguage === 'ta' || selectedLanguage === 'hi' ? 'ltr' : 'ltr'}>
                    {displayText}
                  </p>
                </div>
              ) : (
                <p className="text-lg leading-relaxed text-gray-500 italic">
                  Select a character below to see their text and hear their voice
                </p>
              )}
            </div>
          </div>

          {/* Controls */}
          <div className="flex justify-between items-center mb-8 gap-4 flex-wrap">
            {/* Language Selector */}
            <div className="flex items-center gap-3">
              <select
                value={selectedLanguage}
                onChange={(e) => handleLanguageChange(e.target.value)}
                className="px-4 py-3 border-2 border-gray-200 rounded-xl text-sm font-medium bg-white cursor-pointer transition-all hover:border-blue-400 focus:border-blue-400 focus:outline-none focus:ring-4 focus:ring-blue-100"
              >
                {languages.map((lang) => (
                  <option key={lang.code} value={lang.code}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-3">
              <button
                onClick={handlePlay}
                disabled={!selectedCharacter}
                className={`flex items-center gap-2 px-6 py-3 rounded-full font-semibold transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 ${
                  isPlaying
                    ? 'bg-gradient-to-r from-yellow-400 to-pink-400 text-white shadow-lg'
                    : 'bg-gradient-to-r from-red-400 to-orange-400 text-white shadow-lg hover:shadow-xl'
                }`}
              >
                {isPlaying ? <Pause size={18} /> : <Play size={18} />}
                {isPlaying ? 'PAUSE' : 'PLAY'}
              </button>
              
              <button
                onClick={handleDownload}
                disabled={!selectedCharacter}
                className="flex items-center gap-2 px-4 py-3 rounded-full bg-gray-600 text-white font-semibold transition-all transform hover:scale-105 hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
              >
                <Download size={18} />
              </button>
            </div>
          </div>

          {/* Characters Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
            {characters.map((character) => (
              <div
                key={character.id}
                onClick={() => handleCharacterClick(character)}
                className={`bg-white border-2 rounded-2xl p-5 cursor-pointer transition-all transform hover:scale-105 hover:shadow-lg relative overflow-hidden ${
                  selectedCharacter?.id === character.id
                    ? 'border-current shadow-lg scale-105'
                    : 'border-gray-200 hover:border-current'
                }`}
                style={{
                  '--tw-border-opacity': selectedCharacter?.id === character.id ? '1' : '0.3',
                  borderColor: character.color,
                  color: character.color
                } as React.CSSProperties}
              >
                <div 
                  className="absolute inset-0 opacity-5 transition-opacity"
                  style={{ backgroundColor: character.color }}
                ></div>
                
                <div className="relative z-10">
                  <div className="flex items-center gap-3 mb-4">
                    <div 
                      className="w-10 h-10 rounded-full flex items-center justify-center text-lg border-2"
                      style={{ 
                        borderColor: character.color,
                        backgroundColor: `${character.color}15`
                      }}
                    >
                      {character.emoji}
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-800 text-sm">{character.name}</h3>
                      <p className="text-xs text-gray-600">{character.role}</p>
                    </div>
                  </div>
                  <p className="text-xs text-gray-600 italic leading-relaxed line-clamp-3">
                    {selectedLanguage === 'en' 
                      ? character.text.substring(0, 100) 
                      : (translations[selectedLanguage]?.[character.id] || character.text).substring(0, 100)
                    }...
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VoiceAgentInterface;